{"id": "on-minecraft-bookshelf-dependency-part", "title": "On the Minecraft Bookshelf Dependency Part II: The 1.1 Changes", "content": "<div class=\"readmore\">[Editors Note: For those who do not play Minecraft, you should. You can play it in your browser <a href=\"http://www.minecraft.net/play.jsp\">here</a>, but I strongly recommend downloading the client from <a href=\"http://www.minecraft.net/download.jsp\">here</a>.] <br/><br/>[Another Editors Note: This post is outdated. An updated version is available for the enchanting systems introduced <a href=\"http://www.alphasheep.co.za/2012/07/enchantment-level-vs-bookshelf-part-iii.html\">version 1.3</a>]<br/><br/></div>It took only three weeks for my post about the <a href=\"http://www.alphasheep.co.za/2011/12/on-enchantment-level-bookshelf.html\">Enchantment Level - Bookshelf dependency in Minecraft</a> to go out of date. One of the most welcomed changes listed in the <a href=\"http://www.minecraftwiki.net/wiki/Version_history#1.1\">version history for Minecraft 1.1</a> reads \"Decreased randomness of enchantment levels at Enchantment Tables.\" I have admittedly been waiting for someone else to go digging in the source code and update the formulae on the <a href=\"http://www.minecraftwiki.net/wiki/Enchanting\">wiki page</a>, but no one has. So, I had to do it myself. <div class=\"readmore\"> <br/><br/>I downloaded the <a href=\"http://www.minecraftwiki.net/wiki/Minecraft_Coder_Pack\">Minecraft Coder Pack</a> and decompiled the source code for versions 1.0 and 1.1. Despite having practically no java experience, it did not take me more than a few minutes to find what had changed. In fact, the only difference was a single line, which had previously read <br/><span style=\"font-family: 'Courier New', Courier, monospace; font-size: small;\">\u00a0 \u00a0 j = 1 + random.nextInt((j &gt;&gt; 1) + 1) + random.nextInt(j + 1);</span><br/>and which now reads<br/><span style=\"font-family: 'Courier New', Courier, monospace; font-size: small;\">\u00a0 \u00a0 j = 1 + (j &gt;&gt; 1) + random.nextInt(j + 1);</span><br/><br/>It is immediately obvious that saying that they \"decreased the randomness\" means they literally went into the code and deleted one call to the function \"random.nextInt\". At this stage of the code, <span style=\"font-family: 'Courier New', Courier, monospace; font-size: small;\">j</span> is the number of book shelves around the enchantment table, and is capped at 30.<br/><br/>What this means is that the enchantment level is calculated by adding together 1, half the number of bookshelves (rounded down), and a random integer between 0 and the number of bookshelves. Later on in the code, a random integer between 0 and 4 is added to this. Previously, instead of using half the number of bookshelves, a second random integer between zero and half the number of bookshelves had been used.<br/><br/>This obviously skews the distribution of the offered enchantment levels toward the higher levels, but it also makes lower level enchantments impossible to obtain if you have too many bookshelves. This is not an issue, however, because adding and removing bookshelves is not at all difficult. The net result is that instead of requiring an average of 2480 attempts to be offered a level 50 enchantment as before, the user need only make an average of 155 attempts. This should take less than a couple of minutes to find for most players. The updated probability distributions are shown in Figure 1, with the original distributions shown as dotted lines. The sloping distribution in the upper and lower five levels of the range are caused by the additional random integer between 0 and 4 that is added on.<br/><br/><div style=\"text-align: center;\"><a href=\"data/images/Ri0eYxUm1JY.png\" imageanchor=\"1\" style=\"margin-left:1em; margin-right:1em\"><img border=\"0\" height=\"288\" src=\"data/images/Ri0eYxUm1JY.png\" width=\"400\"/></a><br/><b>Figure 1</b>: Distribution of enchantment levels appearing in the bottom slot</div><br/>The more important relationship for the player is the one that tells the player the optimum number of bookshelves to use to obtain an enchantment of some desired level. The fact that higher levels are more likely has an interesting effect. Previously, the probability of obtaining lower levels was high enough that the bottom slot was almost always the most likely to offer the level you wanted, even if that level was much lower than the maximum available. After the update, however, the top and middle slots play a significant role, resulting in the optimum number of bookshelves having local minima at levels 26 and 34. The optimum number of bookshelves required is shown in Figure 2.<br/><br/><div style=\"text-align: center;\"><a href=\"data/images/zRJ0xbiiMRM.png\" imageanchor=\"1\" style=\"margin-left:1em; margin-right:1em\"><img border=\"0\" height=\"341\" src=\"data/images/zRJ0xbiiMRM.png\" width=\"400\"/></a><br/><b>Figure 2</b>: Optimum number of bookshelves to obtain a desired enchantment level</div><br/><br/><span style=\"font-size: small;\"><i>Thanks go to FifthWhammy for pointing out a small error. It has been corrected.</i></span><br/><br/></div>", "published": "2012-01-25T14:18:00+02:00", "updated": "2013-09-12T12:40:03.549000+02:00", "draft": false, "categories": ["video game mechanics", "Minecraft", "mathematics"]}